local Addon = select(1, ...)

local AceConfigRegistry = LibStub("AceConfigRegistry-3.0")
local AceConfigDialog = LibStub("AceConfigDialog-3.0")
local SML = SML or LibStub:GetLibrary("LibSharedMedia-3.0")
local ACR = LibStub("AceConfigRegistry-3.0", true)

local resolutionselectvalue,groupselectvalue, profiledb = GetCurrentResolution(), "SOLO", {}

local L = LunaUF.L

local InfoTags = {
	["numtargeting"] = true,
	["cnumtargeting"] = true,
	["br"] = true,
	["name"] = true,
	["nameafk"] = true,
	["afk"] = true,
	["shortname:x"] = true,
	["abbrev:name"] = true,
	["guild"] = true,
	["guildrank"] = true,
	["level"] = true,
	["smartlevel"] = true,
	["class"] = true,
	["smartclass"] = true,
	["rare"] = true,
	["elite"] = true,
	["classification"] = true,
	["shortclassification"] = true,
	["race"] = true,
	["smartrace"] = true,
	["creature"] = true,
	["sex"] = true,
	["druidform"] = true,
	["civilian"] = true,
	["pvp"] = true,
	["rank"] = true,
	["numrank"] = true,
	["faction"] = true,
	["ignore"] = true,
	["server"] = true,
	["status"] = true,
	["happiness"] = true,
	["group"] = true,
	["combat"] = true,
	["loyalty"] = true,
	["buffcount"] = true,
	["range"] = true,
}
local HealthnPowerTags = {
	["namehealerhealth"] = true,
	["healerhealth"] = true,
	["smart:healmishp"] = true,
	["cpoints"] = true,
	["smarthealth"] = true,
	["smarthealthp"] = true,
	["ssmarthealth"] = true,
	["ssmarthealthp"] = true,
	["healhp"] = true,
	["hp"] = true,
	["shp"] = true,
	["sshp"] = true,
	["maxhp"] = true,
	["smaxhp"] = true,
	["missinghp"] = true,
	["healmishp"] = true,
	["perhp"] = true,
	["pp"] = true,
	["spp"] = true,
	["maxpp"] = true,
	["smaxpp"] = true,
	["missingpp"] = true,
	["perpp"] = true,
	["druid:pp"] = true,
	["druid:maxpp"] = true,
	["druid:missingpp"] = true,
	["druid:perpp"] = true,
	["incheal"] = true,
	["numheals"] = true,
	["incownheal"] = true,
	["incpreheal"] = true,
	["incafterheal"] = true,
	["hotheal"] = true,
}
local ColorTags = {
	["combatcolor"] = true,
	["pvpcolor"] = true,
	["reactcolor"] = true,
	["levelcolor"] = true,
	["aggrocolor"] = true,
	["classcolor"] = true,
	["healthcolor"] = true,
	["color:xxxxxx"] = true,
	["nocolor"] = true,
	["castname"] = true,
	["casttime"] = true,
	["xp"] = true,
	["percxp"] = true,
	["rep"] = true,
}

local UnitToFrame = {
	["none"] = "UIParent",
	["player"] = "LUFUnitplayer",
	["pet"] = "LUFUnitpet",
	["pettarget"] = "LUFUnitpettarget",
	["target"] = "LUFUnittarget",
	["targettarget"] = "LUFUnittargettarget",
	["targettargettarget"] = "LUFUnittargettargettarget",
	["party"] = "LUFHeaderparty",
	["partytarget"] = "LUFHeaderpartytarget",
	["partypet"] = "LUFHeaderpartypet",
	["raid1"] = "LUFHeaderraid1",
	["raid2"] = "LUFHeaderraid2",
	["raid3"] = "LUFHeaderraid3",
	["raid4"] = "LUFHeaderraid4",
	["raid5"] = "LUFHeaderraid5",
	["raid6"] = "LUFHeaderraid6",
	["raid7"] = "LUFHeaderraid7",
	["raid8"] = "LUFHeaderraid8",
	["raidpet"] = "LUFHeaderraidpet",
	["maintank"] = "LUFHeadermaintank",
	["maintanktarget"] = "LUFHeadermaintanktarget",
	["maintanktargettarget"] = "LUFHeadermaintanktargettarget",
	["mainassist"] = "LUFHeadermainassist",
	["mainassisttarget"] = "LUFHeadermainassisttarget",
	["mainassisttargettarget"] = "LUFHeadermainassisttargettarget",
}

function LunaUF:CreateConfig()

	local function set(info, value)
		local db = LunaUF.db.profile.units
		for i=1, #info-1 do
			db = db[info[i]]
		end
		db[info[#info]] = value

		LunaUF.Layout:Reload(info[1])
	end

	local function get(info)
		local db = LunaUF.db.profile.units
		for i=1, #info do
			db = db[info[i]]
		end
		return db
	end

	local function nbrValidate(info, value)
		if strmatch(value, "^%-?%d*%.?%d*$") then
			return true
		else
			return L["Not a valid number."]
		end
	end

	local function setGeneral(info, value)
		LunaUF.db.profile[info[#info]] = value
		if info.arg then
			LunaUF[info.arg](LunaUF)
		end
	end

	local function getGeneral(info)
		return LunaUF.db.profile[info[#info]]
	end

	local function setEnableUnit(info, value)
		set(info, value)
		LunaUF:LoadUnits()
		LunaUF.modules.movers:Update()
		if not value then
			if info[#info-1] == "raid" then
				for unit,tbl in pairs(LunaUF.db.profile.units) do
					if unit ~= "raid" then
						if strsub(tbl.anchorTo,1,13) == "LUFHeaderraid" then
							tbl.anchorTo = "UIParent"
							LunaUF.modules.movers:SetFrame(_G[UnitToFrame[unit]])
						end
					end
				end
			else
				for unit,tbl in pairs(LunaUF.db.profile.units) do
					if unit == "raid" then
						for i,opt in pairs(tbl.positions) do
							if opt.anchorTo == UnitToFrame[info[#info-1]] then
								opt.anchorTo = "UIParent"
								LunaUF.modules.movers:SetFrame(_G[UnitToFrame["raid"..i]])
							end
						end
					else
						if tbl.anchorTo == UnitToFrame[info[#info-1]] then
							tbl.anchorTo = "UIParent"
							if _G[UnitToFrame[unit]] then
								LunaUF.modules.movers:SetFrame(_G[UnitToFrame[unit]])
							else
								tbl.point = "TOPRIGHT"
								tbl.relativePoint = "BOTTOMLEFT"
								tbl.x = UIParent:GetWidth()/2*UIParent:GetScale()
								tbl.y = UIParent:GetHeight()/2*UIParent:GetScale()
							end
						end
					end
				end
			end
		end
	end

	local function setColor(info, r, g, b)
		local db = LunaUF.db.profile.colors[info[#info]]
		db.r = r
		db.g = g
		db.b = b
		LunaUF.Layout:Reload()
	end

	local function setBGColor(info, r, g, b, a)
		local db = LunaUF.db.profile.colors[info[#info]]
		db.r = r
		db.g = g
		db.b = b
		db.a = a
		for _, frame in pairs(LunaUF.Units.unitFrames) do
			LunaUF.Layout:SetBGColor(frame)
		end
	end

	local function getColor(info)
		local db = LunaUF.db.profile.colors[info[#info]]
		return db.r, db.g ,db.b, db.a
	end

	local MediaList = {}
	local function getMediaData(info)
		local mediaType = info[#(info)]

		MediaList[mediaType] = MediaList[mediaType] or {}

		for k in pairs(MediaList[mediaType]) do MediaList[mediaType][k] = nil end
		for _, name in pairs(SML:List(mediaType)) do
			MediaList[mediaType][name] = name
		end

		return MediaList[mediaType]
	end

	local function wipeTextures()
		for unit,tbl in pairs(LunaUF.db.profile.units) do
			for barname,bartbl in pairs(tbl) do
				if type(bartbl) == "table" and bartbl.statusbar then
					bartbl.statusbar = nil
				end
			end
		end
	end

	local function wipeFonts()
		for unit,tbl in pairs(LunaUF.db.profile.units) do
			for bar,bartbl in pairs(tbl.tags) do
				bartbl.font = nil
			end
			tbl.combatText.font = nil
		end
		LunaUF.db.profile.units.raid.font = nil
	end

	local function setGrowthDir(info, value)
		local unit = info[#info-1]
		local db = LunaUF.db.profile.units[unit]
		local alreadySet = {}

		db.attribPoint = value
		if unit == "party" then
			LunaUF.db.profile.units.partytarget.attribPoint = value
			LunaUF.db.profile.units.partypet.attribPoint = value
		end

		-- Simply re-set all frames is easier than making a complicated selection algorithm
		for unitName, name in pairs(UnitToFrame) do
			if unitName ~= "None" and name ~= "UIParent" and _G[name] then
				LunaUF.modules.movers:SetFrame(_G[name])
			end
		end

		LunaUF.Units:ReloadHeader(unit)
		if unit == "party" then
			LunaUF.Units:ReloadHeader("partytarget")
			LunaUF.Units:ReloadHeader("partypet")
		end
		if unit == "raid" then
			LunaUF.Units:ReloadHeader("raidpet")
		end
	end

	local function getHideRaid(info)
		local db = LunaUF.db.profile.units.party
		if db.hideAnyRaid then
			return "always"
		elseif db.hideSemiRaid then
			return "5man"
		else
			return "never"
		end
	end

	local function setHideRaid(info, value)
		local db = LunaUF.db.profile.units.party
		if value == "always" then
			db.hideAnyRaid = true
			db.hideSemiRaid = nil
		elseif value == "5man" then
			db.hideAnyRaid = nil
			db.hideSemiRaid = true
		else
			db.hideAnyRaid = nil
			db.hideSemiRaid = nil
		end
		LunaUF.Units:ReloadHeader("party")
		LunaUF.Units:ReloadHeader("partypet")
		LunaUF.Units:ReloadHeader("partytarget")
	end

	local function setSortMethod(info, value)
		local unit = info[#info-1]
		LunaUF.db.profile.units[unit].sortMethod = value
		LunaUF.Units:ReloadHeader(unit)
		if unit == "party" then
			LunaUF.db.profile.units["partytarget"].sortMethod = value
			LunaUF.Units:ReloadHeader("partytarget")
			LunaUF.db.profile.units["partypet"].sortMethod = value
			LunaUF.Units:ReloadHeader("partypet")
		end
	end

	local function setSortOrder(info, value)
		local unit = info[#info-1]
		LunaUF.db.profile.units[unit].sortOrder = value
		LunaUF.Units:ReloadHeader(unit)
		if unit == "party" then
			LunaUF.db.profile.units["partytarget"].sortOrder = value
			LunaUF.Units:ReloadHeader("partytarget")
			LunaUF.db.profile.units["partypet"].sortOrder = value
			LunaUF.Units:ReloadHeader("partypet")
		end
	end

	local function getShowWhen(info)
		if LunaUF.db.profile.units.raid.showSolo then
			return "ALWAYS"
		elseif LunaUF.db.profile.units.raid.showParty then
			return "PARTY"
		else
			return "RAID"
		end
	end

	local function setShowWhen(info, value)
		if value == "ALWAYS" then
			LunaUF.db.profile.units.raid.showSolo = true
			LunaUF.db.profile.units.raid.showParty = true
		elseif value == "PARTY" then
			LunaUF.db.profile.units.raid.showSolo = nil
			LunaUF.db.profile.units.raid.showParty = true
		else
			LunaUF.db.profile.units.raid.showSolo = nil
			LunaUF.db.profile.units.raid.showParty = nil
		end
		LunaUF.Units:ReloadHeader("raid")
	end

	local function Lockdown() return LunaUF.InCombatLockdown end

	local function deepAnchorCheck(tbl)
		local inserted
		for frame in pairs(tbl) do
			for key,value in pairs(LunaUF.db.profile.units) do
				if key == "raid" then
					for k,v in pairs(LunaUF.db.profile.units.raid.positions) do
						if v.anchorTo == frame and not tbl[UnitToFrame["raid"..k]] then
							tbl[UnitToFrame["raid"..k]] = true
							inserted = true
						end
					end
				else
					if value.anchorTo == frame and not tbl[UnitToFrame[key]] then
						tbl[UnitToFrame[key]] = true
						inserted = true
					end
				end
			end
		end
		if inserted then
			return deepAnchorCheck(tbl)
		else
			return tbl
		end
	end

	local function getAnchors(info)
		local unit = info[#info-1]
		if unit == "raid" then
			unit = info[#info]
		end
		local tbl = {
				["UIParent"]=L["None"],
				["LUFUnitplayer"]=L["player"],
				["LUFUnitpet"]=L["pet"],
				["LUFUnitpettarget"]=L["pettarget"],
				["LUFUnittarget"]=L["target"],
				["LUFUnittargettarget"]=L["targettarget"],
				["LUFUnittargettargettarget"]=L["targettargettarget"],
				["LUFHeaderparty"]=L["party"],
				["LUFHeaderpartytarget"]=L["partytarget"],
				["LUFHeaderpartypet"]=L["partypet"],
				["LUFHeaderraid1"]=(L["raid"].."1"),
				["LUFHeaderraid2"]=(L["raid"].."2"),
				["LUFHeaderraid3"]=(L["raid"].."3"),
				["LUFHeaderraid4"]=(L["raid"].."4"),
				["LUFHeaderraid5"]=(L["raid"].."5"),
				["LUFHeaderraid6"]=(L["raid"].."6"),
				["LUFHeaderraid7"]=(L["raid"].."7"),
				["LUFHeaderraid8"]=(L["raid"].."8"),
				["LUFHeaderraidpet"]=L["raidpet"],
				["LUFHeadermaintank"]=L["maintank"],
				["LUFHeadermaintanktarget"]=L["maintanktarget"],
				["LUFHeadermaintanktargettarget"]=L["maintanktargettarget"],
				["LUFHeadermainassist"]=L["mainassist"],
				["LUFHeadermainassisttarget"]=L["mainassisttarget"],
				["LUFHeadermainassisttargettarget"]=L["mainassisttargettarget"],
			}
		for key in pairs(deepAnchorCheck({[UnitToFrame[unit]]=true})) do
			tbl[key] = nil
		end
		for frameName, unitName in pairs(tbl) do
			if frameName ~= "UIParent" and _G[frameName] then
				if not LunaUF.db.profile.units[_G[frameName].unitType].enabled then
					tbl[frameName] = nil
				end
			elseif not _G[frameName] then
				tbl[frameName] = nil
			end
		end
		return tbl
	end

	local function SetAnchorTo(info, value)
		local frame
		if info[#info-1] == "raid" then
			local nbr = strmatch(info[#info], "%d")
			LunaUF.db.profile.units.raid.positions[tonumber(nbr)].anchorTo = value
			frame = LunaUF.Units.headerFrames["raid"..nbr]
		else
			LunaUF.db.profile.units[info[#info-1]].anchorTo = value
			frame = _G[UnitToFrame[info[#info-1]]]
		end
		LunaUF.modules.movers:SetFrame(frame)

		-- Notify the configuration it can update itself now
		if( ACR ) then
			ACR:NotifyChange("LunaUnitFrames")
		end
	end

	local moduleBlacklist = {
		["range"] = {
			["player"] = true,
		},
	}

	local function validateMissingBuffInput(info, value)
		if LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type ~= "missing" then return true end
        local spellGroups = {strsplit(";",value)}
        local j
        for j,spellGroup in ipairs(spellGroups) do
            local localSpells = {strsplit("/",spellGroup)}
            local k
            for k,spell in ipairs(localSpells) do
                spell = spell:gsub("%[mana%]", "")
                if spell ~="" and not tonumber(spell) and not GetSpellInfo(spell) then
                    return L["You can only use Spellnames for Spells your Character knows otherwise please use Spell IDs"]
                end
            end
        end
		return true
	end

	local moduleOptions = {
		["healthBar"] = {
			name = L["Health bar"],
			type = "group",
			order = 3,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."], L["Health bar"]),
					type = "toggle",
					order = 1,
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 2,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 3,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				colorType = {
					name = L["Color by type"],
					--desc = L["Color by type"],
					type = "select",
					order = 4,
					values = function(info) if info[1] ~= "pet" then return {["class"] = L["Class"], ["static"] = L["Static"], ["percent"] = L["Health percent"]} else return {["happiness"] = L["Happiness"], ["static"] = L["Static"], ["percent"] = L["Health percent"]} end end,
				},
				reactionType = {
					name = L["Color by reaction"],
					--desc = L["Color by reaction"],
					type = "select",
					order = 5,
					values = {["none"] = L["Never (Disabled)"], ["player"] = L["Players only"], ["npc"] = L["NPCs only"], ["both"] = L["Both"]},
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 6,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 7,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 8,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
				vertical = {
					name = L["Vertical"],
					desc = L["Set the bar vertical."],
					type = "toggle",
					order = 9,
				},
				invert = {
					name = L["Invert"],
					desc = L["Kind of inverts the color scheme."],
					type = "toggle",
					order = 10,
				},
			},
		},
		["powerBar"] = {
			name = L["Power bar"],
			type = "group",
			order = 4,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."], L["Power bar"]),
					type = "toggle",
					order = 1,
				},
				ticker = {
					name = L["Ticker"],
					desc = L["Since mana/energy regenerate in ticks, show a timer for it"],
					type = "toggle",
					order = 2,
					hidden = function(info) return info[1] ~= "player" end
				},
				hideticker = {
					name = L["Autohide ticker"],
					desc = L["Hide the ticker when it's not needed"],
					type = "toggle",
					order = 3,
					hidden = function(info) return info[1] ~= "player" end
				},
				fivesecond = {
					name = L["Five second rule"],
					desc = L["Show a timer for the five second rule"],
					type = "toggle",
					order = 4,
					hidden = function(info) return info[1] ~= "player" end
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 5,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 6,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				colorType = {
					name = L["Color by type"],
					--desc = L["Color by type"],
					type = "select",
					order = 7,
					values = {["class"] = L["Class"], ["type"] = L["Power Type"]},
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 8,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 9,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 10,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
				vertical = {
					name = L["Vertical"],
					desc = L["Set the bar vertical."],
					type = "toggle",
					order = 11,
				},
			},
		},
		["manaPrediction"] = {
			name = L["Mana Prediction"],
			type = "group",
			order = 5,
			inline = true,
			hidden = function(info) return not (info[1] == "player") end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Mana Prediction"]),
					type = "toggle",
					order = 1,
				},
				color = {
					name = L["Color"],
					type = "color",
					order = 2,
					width = "half",
					hasAlpha = true,
					get = function(info) local db = LunaUF.db.profile.units.player.manaPrediction.color return db.r, db.g ,db.b, db.a end,
					set = function(info, r, g, b, a) local db = LunaUF.db.profile.units.player.manaPrediction.color db.r = r db.g = g db.b = b db.a = a LunaUF.Layout:Reload() end,
				},
			},
		},
		["castBar"] = {
			name = L["Cast Bar"],
			type = "group",
			order = 6,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Cast Bar"]),
					type = "toggle",
					order = 1,
				},
				autoHide = {
					name = L["Auto hide"],
					desc = string.format(L["Hide when inactive"]),
					type = "toggle",
					order = 2,
				},
				icon = {
					name = L["Cast icon"],
					desc = L["Set the behaviour of the cast icon"],
					type = "select",
					order = 3,
					values = {["HIDE"] = L["Hide"], ["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 6,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 7,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 8,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
			},
		},
		["emptyBar"] = {
			name = L["Empty bar"],
			type = "group",
			order = 7,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."], L["Empty bar"]),
					type = "toggle",
					order = 1,
				},
				Alpha = {
					name = L["Alpha"],
					desc = L["Set the alpha."],
					type = "range",
					order = 2,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				reactionType = {
					name = L["Color by reaction"],
					--desc = L["Color by reaction"],
					type = "select",
					order = 3,
					values = {["none"] = L["Never (Disabled)"], ["player"] = L["Players only"], ["NPC/hostile player"] = L["NPCs and Hostile players"], ["npc"] = L["NPCs only"], ["both"] = L["Both"]},
				},
				class = {
					name = L["Class Colors"],
					desc = L["Color by class."],
					type = "toggle",
					order = 4,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 5,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 6,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 7,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
				vertical = {
					name = L["Vertical"],
					desc = L["Set the bar vertical."],
					type = "toggle",
					order = 8,
				},
			},
		},
		["range"] = {
			name = L["Range"],
			type = "group",
			order = 8,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = L["Enable or disable range checking."],
					type = "toggle",
					order = 1,
				},
			},
		},
		["portrait"] = {
			name = L["Portrait"],
			type = "group",
			order = 9,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Portrait"]),
					type = "toggle",
					order = 1,
				},
				type = {
					name = L["Type"],
					desc = L["Portrait type"],
					type = "select",
					order = 2,
					values = {["3D"] = L["3D"], ["2D"] = L["2D"], ["class"] = L["Class"], ["2dclass"] = L["2D Class"]},
				},
				alignment = {
					name = L["Alignment"],
					desc = L["Portrait alignment"],
					type = "select",
					order = 3,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"], ["CENTER"] = L["Center"]},
				},
				width = {
					name = L["Width"],
					desc = L["Set the width of the portrait."],
					type = "range",
					order = 4,
					min = 0,
					max = 1,
					step = 0.01,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height when in bar mode."],
					type = "range",
					order = 5,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 6,
					min = 0,
					max = 100,
					step = 5,
				},
				fullBefore = {
					name = L["full Before"],
					desc = L["Bars with lower order priority than this will be above."],
					type = "range",
					order = 7,
					min = 0,
					max = 100,
					step = 5,
				},
				fullAfter = {
					name = L["full After"],
					desc = L["Bars with higher order priority than this will be below."],
					type = "range",
					order = 8,
					min = 0,
					max = 100,
					step = 5,
				},
			},
		},
		["incHeal"] = {
			name = L["Incoming heals"],
			type = "group",
			order = 10,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Incoming heals"]),
					type = "toggle",
					order = 1,
				},
				cap = {
					name = L["Inc Heal Cap"],
					desc = L["Let the prediction overgrow the bar."],
					type = "range",
					order = 2,
					min = 1,
					max = 1.3,
					step = 0.01,
				},
				alpha = {
					name = L["Alpha"],
					desc = L["Set the alpha."],
					type = "range",
					order = 3,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
			},
		},
		["auras"] = {
			name = L["Auras"],
			type = "group",
			order = 11,
			inline = true,
			args = {
				generalheader = {
					name = L["General"],
					type = "header",
					order = 1,
				},
				weaponbuffs = {
					name = L["Weaponbuffs"],
					desc = string.format(L["Enable or disable the %s."],L["Weaponbuffs"]),
					type = "toggle",
					order = 2,
					hidden = function(info) return info[1] ~= "player" end
				},
				bordercolor = {
					name = L["Bordercolor"],
					desc = string.format(L["Enable or disable the %s."],L["Bordercolor"]),
					type = "toggle",
					order = 3,
				},
				padding = {
					name = L["Padding"],
					desc = L["Distance between aura icons."],
					type = "range",
					order = 4,
					min = 0,
					max = 10,
					step = 1,
				},
				timer = {
					name = L["Timers"],
					desc = L["Limit timers to..."],
					type = "select",
					order = 5,
					values = {["all"] = L["All"], ["self"] = L["Own"], ["none"] = L["None"]},
				},
				buffheader = {
					name = L["Buffs"],
					type = "header",
					order = 6,
				},
				buffs = {
					name = L["Buffs"],
					desc = string.format(L["Enable or disable the %s."],L["Buffs"]),
					type = "toggle",
					order = 7,
				},
				filterbuffs = {
					name = string.format(L["Filter %s"],L["Buffs"]),
					desc = L["Show only buffs that you or everyone of your class can apply"],
					type = "select",
					order = 8,
					values = {[1] = L["Off"], [2] = L["Your own"], [3] = L["Class"]},
				},
				buffsize = {
					name = L["Size"],
					desc = L["Set the buffsize."],
					type = "range",
					order = 9,
					min = 4,
					max = 50,
					step = 1,
				},
				emphasizeBuffs = {
					name = L["Bigger buffs"],
					desc = string.format(L["Make your own %s bigger."],L["Buffs"]),
					type = "toggle",
					order = 10,
					hidden = function(info) return (LunaUF.db.profile.units[info[1]].auras.buffpos == "INFRAME" or LunaUF.db.profile.units[info[1]].auras.buffpos == "INFRAMECENTER") end
				},
				enlargedbuffsize = {
					name = L["Bigger buff size"],
					desc = L["Set the size."],
					type = "range",
					order = 11,
					min = 0,
					max = 20,
					step = 1,
					hidden = function(info) return (LunaUF.db.profile.units[info[1]].auras.buffpos == "INFRAME" or LunaUF.db.profile.units[info[1]].auras.buffpos == "INFRAMECENTER") end
				},
				buffpos = {
					name = L["Position"],
					desc = string.format(L["Position of the %s."],L["Buffs"]),
					type = "select",
					order = 12,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"], ["TOP"] = L["Top"], ["BOTTOM"] = L["Bottom"], ["INFRAME"] = L["Inside"], ["INFRAMECENTER"] = L["Inside Center"]},
				},
				wrapbuffside = {
					name = L["Horizontal Limit Side"],
					desc = L["Side on which to cut shorter than the frame"],
					type = "select",
					order = 13,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
				},
				wrapbuff = {
					name = L["Horizontal Limit"],
					desc = L["Limit to a percentage of the frame"],
					type = "range",
					order = 14,
					min = 0.2,
					max = 1.5,
					step = 0.01,
					width = "double",
					isPercent = true,
				},
				debuffheader = {
					name = L["Debuffs"],
					type = "header",
					order = 15,
				},
				debuffs = {
					name = L["Debuffs"],
					desc = string.format(L["Enable or disable the %s."],L["Debuffs"]),
					type = "toggle",
					order = 16,
				},
				filterdebuffs = {
					name = string.format(L["Filter %s"],L["Debuffs"]),
					desc = L["Show only debuffs that you can dispel"],
					type = "toggle",
					order = 17,
				},
				debuffsize = {
					name = L["Size"],
					desc = L["Set the debuffsize."],
					type = "range",
					order = 18,
					min = 4,
					max = 50,
					step = 1,
				},
				emphasizeDebuffs = {
					name = L["Bigger debuffs"],
					desc = string.format(L["Make your own %s bigger."],L["Debuffs"]),
					type = "toggle",
					order = 19,
					hidden = function(info) return (LunaUF.db.profile.units[info[1]].auras.debuffpos == "INFRAME" or LunaUF.db.profile.units[info[1]].auras.debuffpos == "INFRAMECENTER") end
				},
				enlargeddebuffsize = {
					name = L["Bigger debuff size"],
					desc = L["Set the size."],
					type = "range",
					order = 20,
					min = 0,
					max = 20,
					step = 1,
					hidden = function(info) return (LunaUF.db.profile.units[info[1]].auras.debuffpos == "INFRAME" or LunaUF.db.profile.units[info[1]].auras.debuffpos == "INFRAMECENTER") end
				},
				debuffpos = {
					name = L["Position"],
					desc = string.format(L["Position of the %s."],L["Debuffs"]),
					type = "select",
					order = 21,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"], ["TOP"] = L["Top"], ["BOTTOM"] = L["Bottom"], ["INFRAME"] = L["Inside"], ["INFRAMECENTER"] = L["Inside Center"]},
				},
				wrapdebuffside = {
					name = L["Horizontal Limit Side"],
					desc = L["Side on which to cut shorter than the frame"],
					type = "select",
					order = 22,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
				},
				wrapdebuff = {
					name = L["Horizontal Limit"],
					desc = L["Limit to a percentage of the frame."],
					type = "range",
					order = 23,
					min = 0.2,
					max = 1.5,
					step = 0.01,
					width = "double",
					isPercent = true,
				},
			},
		},
		["borders"] = {
			name = L["Borders"],
			type = "group",
			order = 12,
			inline = true,
			args = {
				target = {
					name = L["On target"],
					desc = string.format(L["Highlight the frames borders when the unit is targeted"]),
					type = "toggle",
					hidden = function(info) return info[1] == "target" end,
					order = 1,
				},
				mouseover = {
					name = L["On mouseover"],
					desc = string.format(L["Highlight the frames borders when the unit is moused over"]),
					type = "toggle",
					order = 2,
				},
				aggro = {
					name = L["On aggro"],
					desc = string.format(L["Highlight the frames borders when the unit has aggro"]),
					type = "toggle",
					order = 3,
				},
				debuff = {
					name = L["On debuff"],
					desc = string.format(L["Highlight the frames borders when the unit has a debuff you or someone can remove"]),
					type = "select",
					order = 4,
					values = {[1] = L["Off"], [2] = L["Your own"], [3] = L["All"]},
				},
			},
		},
		["highlight"] = {
			name = L["Highlight"],
			type = "group",
			order = 13,
			inline = true,
			args = {
				target = {
					name = L["On target"],
					desc = string.format(L["Highlight the frame when the unit is targeted"]),
					type = "toggle",
					hidden = function(info) return info[1] == "target" end,
					order = 1,
				},
				mouseover = {
					name = L["On mouseover"],
					desc = string.format(L["Highlight the frame when the unit is moused over"]),
					type = "toggle",
					order = 2,
				},
				aggro = {
					name = L["On aggro"],
					desc = string.format(L["Highlight the frame when the unit has aggro"]),
					type = "toggle",
					order = 3,
				},
				debuff = {
					name = L["On debuff"],
					desc = string.format(L["Highlight the frame when the unit has a debuff you or someone can remove"]),
					type = "select",
					order = 4,
					values = {[1] = L["Off"], [2] = L["Your own"], [3] = L["All"]},
				},
			},
		},
		["fader"] = {
			name = L["Combat fader"],
			type = "group",
			order = 14,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Combat fader"]),
					type = "toggle",
					order = 1,
				},
				combatAlpha = {
					name = L["Combat alpha"],
					desc = L["Set the alpha."],
					type = "range",
					order = 2,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				inactiveAlpha = {
					name = L["Inactive alpha"],
					desc = L["Set the alpha."],
					type = "range",
					order = 3,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				speedyFade = {
					name = L["Speedy fade"],
					desc = string.format(L["Enable or disable the %s."],L["Speedy fade"]),
					type = "toggle",
					order = 4,
				},
			},
		},
		["tags"] = {
			name = L["Tags"],
			type = "group",
			order = 15,
			inline = true,
			args = {
				top = {
					name = L["Top"],
					type = "group",
					order = 1,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				healthBar = {
					name = L["Health bar"],
					type = "group",
					order = 2,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				powerBar = {
					name = L["Power bar"],
					type = "group",
					order = 3,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				castBar = {
					name = L["Cast bar"],
					type = "group",
					order = 4,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				emptyBar = {
					name = L["Empty bar"],
					type = "group",
					order = 5,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				druidBar = {
					name = L["Druid bar"],
					type = "group",
					order = 6,
					inline = true,
					hidden = function(info) return info[1] ~= "player" or select(2,UnitClass("player")) ~= "DRUID" end,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				xpBar = {
					name = L["Xp bar"],
					type = "group",
					order = 7,
					inline = true,
					hidden = function(info) return info[1] ~= "player" end,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
				bottom = {
					name = L["Bottom"],
					type = "group",
					order = 8,
					inline = true,
					args = {
						left = {
							name = L["Left"],
							type = "group",
							order = 1,
							inline = true,
							args = {
								tagline = {
									name = L["Left"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						center = {
							name = L["Center"],
							type = "group",
							order = 2,
							inline = true,
							args = {
								tagline = {
									name = L["Center"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						right = {
							name = L["Right"],
							type = "group",
							order = 3,
							inline = true,
							args = {
								tagline = {
									name = L["Right"],
									desc = L["Set the tags."],
									type = "input",
									order = 1,
									width = "double",
								},
								size = {
									name = L["Limit"],
									desc = L["Set after wich percentage of the bar to cut off."],
									type = "range",
									order = 2,
									min = 1,
									max = 100,
									step = 1,
								},
							},
						},
						size = {
							name = L["Font Size"],
							desc = L["Set the font size."],
							type = "range",
							order = 4,
							width = "double",
							min = 5,
							max = 24,
							step = 1,
						},
						font = {
							order = 5,
							type = "select",
							name = L["Font"],
							dialogControl = "LSM30_Font",
							values = getMediaData,
							get = function(info) return get(info) or LunaUF.db.profile.font end,
						},
					},
				},
			},
		},
		["indicators"] = {
			name = L["Indicators"],
			type = "group",
			order = 16,
			inline = true,
			args = {
				raidTarget = {
					name = L["Raid target"],
					type = "group",
					order = 1,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Raid target"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				class = {
					name = L["Class"],
					type = "group",
					order = 2,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Class"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				masterLoot = {
					name = L["Masterloot"],
					type = "group",
					order = 3,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Masterloot"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				leader = {
					name = L["Leader"],
					type = "group",
					order = 4,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Leader"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				pvp = {
					name = L["PvP flag"],
					type = "group",
					order = 5,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["PvP flag"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				pvprank = {
					name = L["PvP Rank"],
					type = "group",
					order = 6,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["PvP Rank"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				ready = {
					name = L["Readycheck"],
					type = "group",
					order = 7,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Readycheck"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				status = {
					name = L["Combat status"],
					type = "group",
					order = 8,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Combat status"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				rezz = {
					name = L["Resurrection"],
					type = "group",
					order = 9,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Resurrection"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				happiness = {
					name = L["Happiness"],
					type = "group",
					order = 10,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Resurrection"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
				elite = {
					name = L["Elite"],
					type = "group",
					order = 11,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Elite"]),
							type = "toggle",
							order = 1,
						},
						side = {
							name = L["Side"],
							desc = L["Elite indicator alignment"],
							type = "select",
							order = 2,
							values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
						},
						type = {
							name = L["Type"],
							desc = L["Type"],
							type = "select",
							order = 3,
							hidden = function(info) return (info[1] ~= "player" and info[1] ~= "pet") end,
							values = {["elite"] = L["elite"], ["rare"] = L["rare"]},
						},
					},
				},
				role = {
					name = L["Raid Role"],
					type = "group",
					order = 12,
					inline = true,
					hidden = function(info) return not LunaUF.db.profile.units[info[1]].indicators[info[3]] end,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Raid Role"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 5,
							max = 40,
							step = 1,
						},
						anchorPoint = {
							name = L["Point"],
							desc = L["Anchor point"],
							type = "select",
							order = 3,
							values = {["TOPLEFT"] = L["Top left"], ["LEFT"] = L["Left"], ["BOTTOMLEFT"] = L["Bottom left"], ["TOP"] = L["Top"], ["CENTER"] = L["Center"], ["BOTTOM"] = L["Bottom"], ["TOPRIGHT"] = L["Top right"], ["RIGHT"] = L["Right"], ["BOTTOMRIGHT"] = L["Bottom right"]},
						},
						x = {
							name = L["X Position"],
							desc = L["Set the X coordinate."],
							type = "range",
							order = 4,
							min = -50,
							max = 50,
							step = 1,
						},
						y = {
							name = L["Y Position"],
							desc = L["Set the Y coordinate."],
							type = "range",
							order = 5,
							min = -100,
							max = 100,
							step = 1,
						},
					},
				},
			},
		},
		["combatText"] = {
			name = L["Combat text"],
			type = "group",
			order = 17,
			hidden = function(info) return LunaUF.fakeUnits[info[1]] end,
			inline = true,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Combat text"]),
					type = "toggle",
					order = 1,
				},
				font = {
					name = L["Font"],
					desc = L["Set the font"],
					type = "select",
					order = 2,
					dialogControl = "LSM30_Font",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.font end,
				},
				size = {
					name = L["Font Size"],
					desc = L["Set the font size."],
					type = "range",
					order = 3,
					min = 5,
					max = 40,
					step = 1,
				},
			},
		},
		["squares"] = {
			name = L["Squares"],
			type = "group",
			order = 18,
			inline = true,
			args = {
				topleft = {
					name = L["Top left"],
					type = "group",
					order = 1,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Top left"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				top = {
					name = L["Top"],
					type = "group",
					order = 2,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Bottom right"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" end,
						},
					},
				},
				topright = {
					name = L["Top right"],
					type = "group",
					order = 3,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Top right"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				leftcenter = {
					name = L["Left Center"],
					type = "group",
					order = 4,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Left Center"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				center = {
					name = L["Center"],
					type = "group",
					order = 5,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Center"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				rightcenter = {
					name = L["Right Center"],
					type = "group",
					order = 6,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Right Center"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				bottomleft = {
					name = L["Bottom left"],
					type = "group",
					order = 7,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Bottom left"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
				bottom = {
					name = L["Bottom"],
					type = "group",
					order = 8,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Bottom right"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" end,
						},
					},
				},
				bottomright = {
					name = L["Bottom right"],
					type = "group",
					order = 9,
					inline = true,
					args = {
						enabled = {
							name = L["Enable"],
							desc = string.format(L["Enable or disable the %s."],L["Bottom right"]),
							type = "toggle",
							order = 1,
						},
						size = {
							name = L["Size"],
							desc = L["Set the size."],
							type = "range",
							order = 2,
							min = 4,
							max = 40,
							step = 1,
						},
						type = {
							name = L["Type"],
							desc = L["What the indicator should display."],
							type = "select",
							order = 3,
							values = { ["aggro"] = L["Aggro"], ["aura"] = L["Buff/Debuff"], ["ownaura"] = L["Own buff/debuff"], ["dispel"] = L["Dispel"], ["missing"] = L["Missing Buff"] },
							set = function(info, value) set(info,value) AceConfigRegistry:NotifyChange("LunaUnitFrames") end,
						},
						value = {
							name = L["Name (exact) or ID"],
							desc = L["Name (exact) or ID of the effect to track. Can have multiple entries seperated by ;"],
							type = "input",
							order = 4,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "dispel" end,
							validate = validateMissingBuffInput,
						},
						timer = {
							name = L["Timer"],
							desc = string.format(L["Enable or disable the %s."],L["Timer"]),
							type = "toggle",
							order = 5,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
						texture = {
							name = L["Texture"],
							desc = L["Show the spell texture instead of its type color."],
							type = "toggle",
							order = 6,
							hidden = function(info) return LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "aggro" or LunaUF.db.profile.units[info[#info-3]].squares[info[#info-1]].type == "missing" end,
						},
					},
				},
			},
		},
		["xpBar"] = {
			name = L["Xp bar"],
			type = "group",
			order = -5,
			inline = true,
			hidden = function(info) return not (info[1] == "player" or info[1] == "pet") end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Xp bar"]),
					type = "toggle",
					order = 1,
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 2,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 3,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 4,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 5,
					min = 0,
					max = 100,
					step = 5,
				},
				alpha = {
					name = L["Alpha"],
					desc = L["Set the alpha."],
					type = "range",
					order = 6,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				mouse = {
					name = L["Mouse interaction"],
					desc = L["This enables xp tooltips but disables clicks or vice versa"],
					type = "toggle",
					disabled = Lockdown,
					order = 7,
				},
				statusbar = {
					order = 8,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
			},
		},
		["druidBar"] = {
			name = L["Druid bar"],
			type = "group",
			order = -4,
			inline = true,
			hidden = function(info) return info[1] ~= "player" or select(2,UnitClass("player")) ~= "DRUID" end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Druid bar"]),
					type = "toggle",
					order = 1,
				},
				autoHide = {
					name = L["Auto hide"],
					desc = string.format(L["Hide when inactive"]),
					type = "toggle",
					order = 2,
				},
				ticker = {
					name = L["Ticker"],
					desc = L["Since mana/energy regenerate in ticks, show a timer for it"],
					type = "toggle",
					order = 3,
				},
				hideticker = {
					name = L["Autohide ticker"],
					desc = L["Hide the ticker when it's not needed"],
					type = "toggle",
					order = 4,
				},
				fivesecond = {
					name = L["Five second rule"],
					desc = L["Show a timer for the five second rule"],
					type = "toggle",
					order = 5,
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 6,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 7,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 8,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 9,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 10,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
				vertical = {
					name = L["Vertical"],
					desc = L["Set the bar vertical."],
					type = "toggle",
					order = 11,
				},
			},
		},
		["reckStacks"] = {
			name = L["Reckoning stacks"],
			type = "group",
			order = -3,
			inline = true,
			hidden = function(info) return info[1] ~= "player" or select(2,UnitClass("player")) ~= "PALADIN" end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Reckoning stacks"]),
					type = "toggle",
					order = 1,
				},
				autoHide = {
					name = L["Auto hide"],
					desc = string.format(L["Hide when inactive"]),
					type = "toggle",
					order = 3,
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 4,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 5,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 6,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 7,
					min = 0,
					max = 100,
					step = 5,
				},
				growth = {
					name = L["Growth direction"],
					desc = L["Growth direction"],
					type = "select",
					order = 8,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
				},
				statusbar = {
					order = 9,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
			},
		},
		["totemBar"] = {
			name = L["Totem bar"],
			type = "group",
			order = -2,
			inline = true,
			hidden = function(info) return info[1] ~= "player" or select(2,UnitClass("player")) ~= "SHAMAN" end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Totem bar"]),
					type = "toggle",
					order = 1,
				},
				autoHide = {
					name = L["Auto hide"],
					desc = string.format(L["Hide when inactive"]),
					type = "toggle",
					order = 2,
				},
				background = {
					name = L["Background"],
					desc = string.format(L["Enable or disable the %s."], L["Background"]),
					type = "toggle",
					order = 3,
				},
				backgroundAlpha = {
					name = L["Background alpha"],
					desc = L["Set the background alpha."],
					type = "range",
					order = 4,
					min = 0.01,
					max = 1,
					step = 0.01,
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 5,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 6,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 7,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
			},
		},
		["comboPoints"] = {
			name = L["Combopoints"],
			type = "group",
			order = -1,
			inline = true,
			hidden = function(info) return info[1] ~= "target" or (select(2,UnitClass("player")) ~= "ROGUE" and select(2,UnitClass("player")) ~= "DRUID") end,
			args = {
				enabled = {
					name = L["Enable"],
					desc = string.format(L["Enable or disable the %s."],L["Combopoints"]),
					type = "toggle",
					order = 1,
				},
				autoHide = {
					name = L["Auto hide"],
					desc = L["Hide when inactive"],
					type = "toggle",
					order = 2,
				},
				growth = {
					name = L["Growth direction"],
					desc = L["Growth direction"],
					type = "select",
					order = 3,
					values = {["LEFT"] = L["Left"], ["RIGHT"] = L["Right"]},
				},
				height = {
					name = L["Height"],
					desc = L["Set the height."],
					type = "range",
					order = 4,
					min = 1,
					max = 10,
					step = 0.1,
				},
				order = {
					name = L["Order"],
					desc = L["Set the order priority."],
					type = "range",
					order = 5,
					min = 0,
					max = 100,
					step = 5,
				},
				statusbar = {
					order = 6,
					type = "select",
					name = L["Bar texture"],
					dialogControl = "LSM30_Statusbar",
					values = getMediaData,
					get = function(info) return get(info) or LunaUF.db.profile.statusbar end,
				},
			},
		},
	}

	local aceoptions = {
		name = "Luna Unit Frames",
		type = "group",
		get = get,
		set = set,
		icon = "Interface\\AddOns\\LunaUnitFrames\\media\\textures\\icon",
		args = {
			general = {
				name = L["General"],
				type = "group",
				order = 1,
				get = getGeneral,
				set = setGeneral,
				args = {
					description = {
						name = "",
						type = "description",
						image = "Interface\\AddOns\\LunaUnitFrames\\media\\textures\\icon",
						imageWidth = 64,
						imageHeight = 64,
						width = "half",
						order = 1,
					},
					descriptiontext = {
						name = "Luna Unit Frames by Aviana\nDonate: paypal.me/LunaUnitFrames\n".."Version: "..LunaUF.version,
						type = "description",
						width = "full",
						order = 2,
					},
					header = {
						name = L["Global Settings"],
						type = "header",
						width = "double",
						order = 3,
					},
					locked = {
						name = L["Lock"],
						desc = L["Lock the frames"],
						type = "toggle",
						order = 4,
						disabled = Lockdown,
						set = function(info, value) setGeneral(info, value) LunaUF.modules.movers:Update() end,
					},
					previewauras = {
						name = L["Preview Auras"],
						desc = L["Show the maximum Auras in preview mode"],
						type = "toggle",
						order = 5,
						disabled = Lockdown,
						set = function(info, value) setGeneral(info, value) LunaUF.Layout:Reload() end,
					},
					tooltipCombat = {
						name = L["Tooltip in Combat"],
						desc = L["Show unitframe tooltips in combat"],
						type = "toggle",
						order = 6,
					},
					headerGlobalSettings = {
						name = L["Global Unit Settings"],
						type = "header",
						order = 7,
					},
					statusbar = {
						order = 8,
						type = "select",
						name = L["Bar texture"],
						dialogControl = "LSM30_Statusbar",
						values = getMediaData,
						confirm = function(info) return L["WARNING! This will set ALL bars to this texture."] end,
						set = function(info, value) wipeTextures() setGeneral(info, value) LunaUF.Layout:Reload() end,
					},
					font = {
						order = 9,
						type = "select",
						name = L["Font"],
						dialogControl = "LSM30_Font",
						values = getMediaData,
						confirm = function(info) return L["WARNING! This will set ALL texts to this font."] end,
						set = function(info, value) wipeFonts() setGeneral(info, value) LunaUF.Layout:Reload() LunaUF.Units:ReloadHeader("raid") LunaUF.Units:ReloadHeader("raidpet") end,
					},
					auraborderType = {
						order = 10,
						type = "select",
						name = L["Aura border"],
						values = {["none"] = L["None"], ["blizzard"] = "Blizzard", ["light"] = L["Light"], ["dark"] = L["Dark"], ["black"] = L["Black"], ["light-thin"] = L["Light thin"], ["dark-thin"] = L["Dark thin"], ["black-thin"] = L["Black thin"]},
						set = function(info, value) setGeneral(info, value) LunaUF.Layout:Reload() end,
					},
					inchealTime = {
						name = L["Heal prediction timeframe"],
						desc = L["Set how long into the future heals are predicted."],
						type = "range",
						order = 11,
						min = 3,
						max = 21,
						step = 0.5,
					},
					disablehots = {
						name = L["Disable hots"],
						desc = L["Disable hots in heal prediction"],
						type = "toggle",
						order = 12,
					},
					omnicc = {
						name = L["Disable OmniCC"],
						desc = L["Prevent OmniCC from putting numbers on cooldown animations (Requires UI reload)"],
						type = "toggle",
						order = 13,
						disabled = Lockdown,
						set = function(info, value) setGeneral(info, value) for frame in pairs(LunaUF.Units.frameList) do frame:FullUpdate() end end,
					},
					blizzardcc = {
						name = L["Disable Blizzard cooldown count"],
						desc = L["Prevent the default UI from putting numbers on cooldown animations"],
						type = "toggle",
						order = 14,
						disabled = Lockdown,
						set = function(info, value) setGeneral(info, value) for frame in pairs(LunaUF.Units.frameList) do frame:FullUpdate() end end,
					},
					headerRange = {
						name = L["Range"],
						type = "header",
						order = 15,
					},
					range = {
						name = L["Distance"],
						desc = L["Distance to measure"],
						type = "select",
						order = 16,
						values = {[10] = L["10y"], [30] = L["30y"], [40] = L["Spell based"], [100] = L["Is Visible"], },
						get = function(info) return LunaUF.db.profile.range.dist end,
						set = function(info, value) LunaUF.db.profile.range.dist = value end,
					},
					alpha = {
						name = L["Alpha"],
						desc = L["Set the alpha."],
						type = "range",
						order = 17,
						min = 0.01,
						max = 1,
						step = 0.01,
						get = function(info) return LunaUF.db.profile.range.alpha end,
						set = function(info, value) LunaUF.db.profile.range.alpha = value end,
					},
					rangeFrequency = {
						name = L["Range Frequency"],
						desc = L["Set the interval of range checking."],
						type = "range",
						order = 18,
						min = 0.1,
						max = 1,
						step = 0.1,
						get = function(info) return LunaUF.db.profile.range.frequency end,
						set = function(info, value) LunaUF.db.profile.range.frequency = value end,
					},
				},
			},
			colors = {
				name = L["Colors"],
				type = "group",
				order = 2,
				get = getColor,
				set = setColor,
				args = {
					headerClassColors = {
						name = L["Class Colors"],
						type = "header",
						order = 1,
					},
					HUNTER = {
						name = L["Hunter"],
						type = "color",
						order = 2,
						width = "half",
					},
					WARLOCK = {
						name = L["Warlock"],
						type = "color",
						order = 3,
						width = "half",
					},
					PRIEST = {
						name = L["Priest"],
						type = "color",
						order = 4,
						width = "half",
					},
					PALADIN = {
						name = L["Paladin"],
						type = "color",
						order = 5,
						width = "half",
					},
					MAGE = {
						name = L["Mage"],
						type = "color",
						order = 6,
						width = "half",
					},
					ROGUE = {
						name = L["Rogue"],
						type = "color",
						order = 7,
						width = "half",
					},
					DRUID = {
						name = L["Druid"],
						type = "color",
						order = 8,
						width = "half",
					},
					SHAMAN = {
						name = L["Shaman"],
						type = "color",
						order = 9,
						width = "half",
					},
					WARRIOR = {
						name = L["Warrior"],
						type = "color",
						order = 10,
						width = "half",
					},
					PET = {
						name = L["Pet"],
						type = "color",
						order = 11,
						width = "half",
					},
					headerPowerColors = {
						name = L["Power Colors"],
						type = "header",
						order = 12,
					},
					MANA = {
						name = L["Mana"],
						type = "color",
						order = 13,
						width = "half",
					},
					RAGE = {
						name = L["Rage"],
						type = "color",
						order = 14,
						width = "half",
					},
					FOCUS = {
						name = L["Focus"],
						type = "color",
						order = 15,
						width = "half",
					},
					ENERGY = {
						name = L["Energy"],
						type = "color",
						order = 16,
						width = "half",
					},
					COMBOPOINTS = {
						name = L["Combopoints"],
						type = "color",
						order = 17,
					},
					headerReactionColors = {
						name = L["Reaction Colors"],
						type = "header",
						order = 18,
					},
					tapped = {
						name = L["Tapped"],
						type = "color",
						order = 19,
						width = "half",
					},
					red = {
						name = L["Red"],
						type = "color",
						order = 20,
						width = "half",
					},
					green = {
						name = L["Green"],
						type = "color",
						order = 21,
						width = "half",
					},
					static = {
						name = L["Static"],
						type = "color",
						order = 22,
						width = "half",
					},
					yellow = {
						name = L["Yellow"],
						type = "color",
						order = 23,
						width = "half",
					},
					incheal = {
						name = L["Inc Heal"],
						type = "color",
						order = 24,
						width = "half",
					},
					incownheal = {
						name = L["Inc Own Heal"],
						type = "color",
						order = 25,
						width = "half",
					},
					inchots = {
						name = L["Inc Hots"],
						type = "color",
						order = 26,
						width = "half",
					},
					enemyUnattack = {
						name = L["Enemy unattackable"],
						type = "color",
						order = 27,
					},
					enemyCivilian = {
						name = L["Enemy civilian"],
						type = "color",
						order = 28,
					},
					hostile = {
						name = L["Hostile"],
						type = "color",
						order = 29,
						width = "half",
					},
					aggro = {
						name = L["Aggro"],
						type = "color",
						order = 30,
						width = "half",
					},
					friendly = {
						name = L["Friendly"],
						type = "color",
						order = 31,
						width = "half",
					},
					neutral = {
						name = L["Neutral"],
						type = "color",
						order = 32,
						width = "half",
					},
					offline = {
						name = L["Offline"],
						type = "color",
						order = 33,
						width = "half",
					},
					headerCastColors = {
						name = L["Cast Colors"],
						type = "header",
						order = 34,
					},
					channel = {
						name = L["Channel"],
						type = "color",
						order = 35,
						width = "half",
					},
					cast = {
						name = L["Cast"],
						type = "color",
						order = 36,
						width = "half",
					},
					headerXPColors = {
						name = L["XP Colors"],
						type = "header",
						order = 37,
					},
					normal = {
						name = L["Normal"],
						type = "color",
						order = 38,
						width = "half",
					},
					rested = {
						name = L["Rested"],
						type = "color",
						order = 39,
						width = "half",
					},
					headerBGColors = {
						name = L["Background"],
						type = "header",
						order = 40,
					},
					background = {
						name = L["Background"],
						type = "color",
						order = 41,
						width = "half",
						hasAlpha = true,
						set = setBGColor,
					},
					headerHighlight = {
						name = L["Highlight"],
						type = "header",
						order = 42,
					},
					mouseover = {
						name = L["Mouseover"],
						type = "color",
						order = 43,
						width = "half",
					},
					target = {
						name = L["target"],
						type = "color",
						order = 44,
						width = "half",
					},
				},
			},
			player = {
				name = L["player"],
				type = "group",
				order = 3,
				set = function(info, value) set(info, value) LunaUF.Layout:Reload("player") end,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["player"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["player"].x) end,
						set = function(info, value) LunaUF.db.profile.units["player"].x = tonumber(value) LunaUF.Layout:Reload("player") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["player"].y) end,
						set = function(info, value) LunaUF.db.profile.units["player"].y = tonumber(value) LunaUF.Layout:Reload("player") end,
						disabled = Lockdown,
					},
				},
			},
			pet = {
				name = L["pet"],
				type = "group",
				order = 4,
				arg = LunaUF.db.profile.units.pet,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["pet"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["pet"].x) end,
						set = function(info, value) LunaUF.db.profile.units["pet"].x = tonumber(value) LunaUF.Layout:Reload("pet") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["pet"].y) end,
						set = function(info, value) LunaUF.db.profile.units["pet"].y = tonumber(value) LunaUF.Layout:Reload("pet") end,
						disabled = Lockdown,
					},
				},
			},
			pettarget = {
				name = L["pettarget"],
				type = "group",
				order = 5,
				arg = LunaUF.db.profile.units.pettarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["pettarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["pettarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["pettarget"].x = tonumber(value) LunaUF.Layout:Reload("pettarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["pettarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["pettarget"].y = tonumber(value) LunaUF.Layout:Reload("pettarget") end,
						disabled = Lockdown,
					},
				},
			},
			target = {
				name = L["target"],
				type = "group",
				order = 6,
				arg = LunaUF.db.profile.units.target,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["target"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["target"].x) end,
						set = function(info, value) LunaUF.db.profile.units["target"].x = tonumber(value) LunaUF.Layout:Reload("target") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["target"].y) end,
						set = function(info, value) LunaUF.db.profile.units["target"].y = tonumber(value) LunaUF.Layout:Reload("target") end,
						disabled = Lockdown,
					},
					sound = {
						name = L["Targeting sound"],
						desc = L["Enable the sound when switching target"],
						type = "toggle",
						order = 2.7,
					},
				},
			},
			targettarget = {
				name = L["targettarget"],
				type = "group",
				order = 7,
				arg = LunaUF.db.profile.units.targettarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["targettarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["targettarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["targettarget"].x = tonumber(value) LunaUF.Layout:Reload("targettarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["targettarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["targettarget"].y = tonumber(value) LunaUF.Layout:Reload("targettarget") end,
						disabled = Lockdown,
					},
				},
			},
			targettargettarget = {
				name = L["targettargettarget"],
				type = "group",
				order = 8,
				arg = LunaUF.db.profile.units.targettargettarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["targettargettarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.4,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.5,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["targettargettarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["targettargettarget"].x = tonumber(value) LunaUF.Layout:Reload("targettargettarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["targettargettarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["targettargettarget"].y = tonumber(value) LunaUF.Layout:Reload("targettargettarget") end,
						disabled = Lockdown,
					},
				},
			},
			party = {
				name = L["party"],
				type = "group",
				order = 9,
				arg = LunaUF.db.profile.units.party,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["party"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("party") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["party"].x) end,
						set = function(info, value) LunaUF.db.profile.units["party"].x = tonumber(value) LunaUF.Units:ReloadHeader("party") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["party"].y) end,
						set = function(info, value) LunaUF.db.profile.units["party"].y = tonumber(value) LunaUF.Units:ReloadHeader("party") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					hideraid = {
						name = L["Hide in raid"],
						desc = L["Hide while in a raid group."],
						type = "select",
						order = 2.9,
						values = {["never"] = L["Never"],["5man"] = L["Raid > 5 man"],["always"] = L["Any Raid"]},
						get = getHideRaid,
						set = setHideRaid,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.91,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.92,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
					showPlayer = {
						name = L["Show player"],
						desc = L["Show player in the party frame."],
						type = "toggle",
						order = 2.93,
						disabled = Lockdown,
						set = function(info, value) set(info, value) LunaUF.Units:ReloadHeader("party") end,
					},
					showPlayersolo = {
						name = L["Show solo"],
						desc = L["Show player in the party frame when solo."],
						type = "toggle",
						order = 2.94,
						disabled = Lockdown,
						set = function(info, value) set(info, value) LunaUF.Units:ReloadHeader("party") end,
					},
				},
			},
			partytarget = {
				name = L["partytarget"],
				type = "group",
				order = 10,
				arg = LunaUF.db.profile.units.partytarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["partytarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("partytarget") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["partytarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["partytarget"].x = tonumber(value) LunaUF.Units:ReloadHeader("partytarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["partytarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["partytarget"].y = tonumber(value) LunaUF.Units:ReloadHeader("partytarget") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						get = function(info) return LunaUF.db.profile.units["party"].attribPoint end,
						disabled = true,
					},
					hideraid = {
						name = L["Hide in raid"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.9,
						values = {["never"] = L["Never"],["5man"] = L["Raid > 5 man"],["always"] = L["Any Raid"]},
						get = getHideRaid,
						set = setHideRaid,
						disabled = true,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.91,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = true,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.92,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = true,
					},
				},
			},
			partypet = {
				name = L["partypet"],
				type = "group",
				order = 11,
				arg = LunaUF.db.profile.units.partypet,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["partypet"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("partypet") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["partypet"].x) end,
						set = function(info, value) LunaUF.db.profile.units["partypet"].x = tonumber(value) LunaUF.Units:ReloadHeader("partypet") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["partypet"].y) end,
						set = function(info, value) LunaUF.db.profile.units["partypet"].y = tonumber(value) LunaUF.Units:ReloadHeader("partypet") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						get = function(info) return LunaUF.db.profile.units["party"].attribPoint end,
						disabled = true,
					},
					hideraid = {
						name = L["Hide in raid"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.9,
						values = {["never"] = L["Never"],["5man"] = L["Raid > 5 man"],["always"] = L["Any Raid"]},
						get = getHideRaid,
						set = setHideRaid,
						disabled = true,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.91,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = true,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["This is set through party options."],
						type = "select",
						order = 2.92,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = true,
					},
				},
			},
			raid = {
				name = L["raid"],
				type = "group",
				order = 12,
				arg = LunaUF.db.profile.units.raid,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["raid"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.31,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raid") end,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.32,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					groupBy = {
						name = L["Group by"],
						desc = L["Group by class or group"],
						type = "select",
						order = 2.33,
						values = {["GROUP"] = L["Group"],["CLASS"] = L["Class"]},
						disabled = Lockdown,
						set = function(info, value)
								if value == "GROUP" then
									LunaUF.db.profile.units.raid.unitsPerColumn = 5
								else
									LunaUF.db.profile.units.raid.unitsPerColumn = 40
								end
								set(info,value)
								LunaUF.Units:ReloadHeader("raid")
							end,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.331,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.332,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
					showWhen = {
						name = L["Show when"],
						desc = L["Show even smaler groups than a raid in the raidframe"],
						type = "select",
						order = 2.34,
						values = {["ALWAYS"] = L["Always"],["PARTY"] = L["party"], ["RAID"] = L["raid"]},
						get = getShowWhen,
						set = setShowWhen,
						disabled = Lockdown,
					},
					groupnumbers = {
						name = L["Groupnumbers"],
						desc = L["Show Groupnumbers next to the group"],
						type = "toggle",
						order = 2.36,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raid") LunaUF.Units:ReloadHeader("raidpet") end,
					},
					fontsize = {
						name = L["Fontsize"],
						desc = L["Set the size of the group number."],
						type = "range",
						order = 2.37,
						min = 1,
						max = 20,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raid") end,
					},
					font = {
						order = 2.38,
						type = "select",
						name = L["Groupnumberfont"],
						dialogControl = "LSM30_Font",
						values = getMediaData,
						get = function(info) return get(info) or LunaUF.db.profile.font end,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raid") LunaUF.Units:ReloadHeader("raidpet") end,
					},
					headerraid1 = {
						name = L["raid"].."1",
						type = "header",
						order = 2.41,
					},
					enabled1 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.411,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[1] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[1] end,
					},
					raid1 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.412,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[1].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x1 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.413,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[1].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[1].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y1 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.414,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[1].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[1].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid2 = {
						name = L["raid"].."2",
						type = "header",
						order = 2.42,
					},
					enabled2 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.421,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[2] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[2] end,
					},
					raid2 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.422,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[2].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x2 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.423,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[2].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[2].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y2 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.424,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[2].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[2].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid3 = {
						name = L["raid"].."3",
						type = "header",
						order = 2.43,
					},
					enabled3 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.431,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[3] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[3] end,
					},
					raid3 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.432,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[3].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x3 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.433,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[3].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[3].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y3 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.434,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[3].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[3].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid4 = {
						name = L["raid"].."4",
						type = "header",
						order = 2.44,
					},
					enabled4 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.441,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[4] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[4] end,
					},
					raid4 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.442,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[4].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x4 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.443,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[4].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[4].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y4 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.444,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[4].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[4].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid5 = {
						name = L["raid"].."5",
						type = "header",
						order = 2.45,
					},
					enabled5 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.451,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[5] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[5] end,
					},
					raid5 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.452,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[5].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x5 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.453,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[5].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[5].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y5 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.454,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[5].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[5].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid6 = {
						name = L["raid"].."6",
						type = "header",
						order = 2.46,
					},
					enabled6 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.461,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[6] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[6] end,
					},
					raid6 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.462,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[6].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x6 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.463,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[6].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[6].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y6 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.464,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[6].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[6].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid7 = {
						name = L["raid"].."7",
						type = "header",
						order = 2.47,
					},
					enabled7 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.471,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[7] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[7] end,
					},
					raid7 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.472,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[7].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x7 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.473,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[7].x) end,
						set =  function(info, value) LunaUF.db.profile.units.raid.positions[7].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y7 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.474,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[7].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[7].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					headerraid8 = {
						name = L["raid"].."8",
						type = "header",
						order = 2.48,
					},
					enabled8 = {
						name = L["Enable"],
						desc = L["Enable this group"],
						type = "toggle",
						order = 2.481,
						width = "half",
						disabled = Lockdown,
						set = function(info, value) LunaUF.db.profile.units.raid.filters[8] = value LunaUF:LoadUnits() LunaUF.modules.movers:Update() end,
						get = function(info, value) return LunaUF.db.profile.units.raid.filters[8] end,
					},
					raid8 = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.482,
						values = getAnchors,
						get = function() return LunaUF.db.profile.units.raid.positions[8].anchorTo end,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x8 = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.483,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[8].x) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[8].x = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
					y8 = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.484,
						width = 0.8,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units.raid.positions[8].y) end,
						set = function(info, value) LunaUF.db.profile.units.raid.positions[8].y = tonumber(value) LunaUF.Units:ReloadHeader("raid") end,
						disabled = Lockdown,
					},
				},
			},
			raidpet = {
				name = L["raidpet"],
				type = "group",
				order = 13,
				arg = LunaUF.db.profile.units.raidpet,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["raidpet"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raidpet") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["raidpet"].x) end,
						set = function(info, value) LunaUF.db.profile.units["raidpet"].x = tonumber(value) LunaUF.Units:ReloadHeader("raidpet") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["raidpet"].y) end,
						set = function(info, value) LunaUF.db.profile.units["raidpet"].y = tonumber(value) LunaUF.Units:ReloadHeader("raidpet") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["This is set through raid options."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						get = function(info) return LunaUF.db.profile.units["raid"].attribPoint end,
						set = setGrowthDir,
						disabled = true,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
					showWhen = {
						name = L["Show when"],
						desc = L["This is set through raid options."],
						type = "select",
						order = 2.92,
						values = {["ALWAYS"] = L["Always"],["PARTY"] = L["party"], ["RAID"] = L["raid"]},
						get = getShowWhen,
						set = function(info,value) end,
						disabled = true,
					},
					unitsPerColumn = {
						name = L["Units per column"],
						desc = L["The amount of units until a new column is started"],
						type = "range",
						order = 2.93,
						min = 1,
						max = 40,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raidpet") end,
					},
					maxColumns = {
						name = L["Max columns"],
						desc = L["The maximum amount of columns"],
						type = "range",
						order = 2.94,
						min = 1,
						max = 40,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raidpet") end,
					},
					columnSpacing = {
						name = L["Column spacing"],
						desc = L["The space between each column"],
						type = "range",
						order = 2.95,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("raidpet") end,
					},
					attribAnchorPoint = {
						name = L["Column Growth direction"],
						desc = L["Where a new column is started"],
						type = "select",
						order = 2.96,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						get = function(info) return LunaUF.db.profile.units["raidpet"].attribAnchorPoint end,
						set = function(info, value) LunaUF.db.profile.units["raidpet"].attribAnchorPoint = value LunaUF.Units:ReloadHeader("raidpet") end,
						disabled = Lockdown,
					},
				},
			},
			maintank = {
				name = L["maintank"],
				type = "group",
				order = 14,
				arg = LunaUF.db.profile.units.maintank,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["maintank"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("maintank") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintank"].x) end,
						set = function(info, value) LunaUF.db.profile.units["maintank"].x = tonumber(value) LunaUF.Units:ReloadHeader("maintank") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintank"].y) end,
						set = function(info, value) LunaUF.db.profile.units["maintank"].y = tonumber(value) LunaUF.Units:ReloadHeader("maintank") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			maintanktarget = {
				name = L["maintanktarget"],
				type = "group",
				order = 15,
				arg = LunaUF.db.profile.units.maintanktarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["maintanktarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("maintanktarget") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintanktarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["maintanktarget"].x = tonumber(value) LunaUF.Units:ReloadHeader("maintanktarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintanktarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["maintanktarget"].y = tonumber(value) LunaUF.Units:ReloadHeader("maintanktarget") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			maintanktargettarget = {
				name = L["maintanktargettarget"],
				type = "group",
				order = 15,
				arg = LunaUF.db.profile.units.maintanktargettarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["maintanktargettarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("maintanktargettarget") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintanktargettarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["maintanktargettarget"].x = tonumber(value) LunaUF.Units:ReloadHeader("maintanktargettarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["maintanktargettarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["maintanktargettarget"].y = tonumber(value) LunaUF.Units:ReloadHeader("maintanktargettarget") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			mainassist = {
				name = L["mainassist"],
				type = "group",
				order = 16,
				arg = LunaUF.db.profile.units.mainassist,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["mainassist"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("mainassist") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassist"].x) end,
						set = function(info, value) LunaUF.db.profile.units["mainassist"].x = tonumber(value) LunaUF.Units:ReloadHeader("mainassist") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassist"].y) end,
						set = function(info, value) LunaUF.db.profile.units["mainassist"].y = tonumber(value) LunaUF.Units:ReloadHeader("mainassist") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			mainassisttarget = {
				name = L["mainassisttarget"],
				type = "group",
				order = 17,
				arg = LunaUF.db.profile.units.mainassisttarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["mainassisttarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("mainassisttarget") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassisttarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["mainassisttarget"].x = tonumber(value) LunaUF.Units:ReloadHeader("mainassisttarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassisttarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["mainassisttarget"].y = tonumber(value) LunaUF.Units:ReloadHeader("mainassisttarget") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			mainassisttargettarget = {
				name = L["mainassisttargettarget"],
				type = "group",
				order = 17,
				arg = LunaUF.db.profile.units.mainassisttargettarget,
				args = {
					enabled = {
						name = L["Enable"],
						desc = string.format(L["Enable the %s frame(s)"], L["mainassisttargettarget"]),
						type = "toggle",
						order = 1,
						disabled = Lockdown,
						set = setEnableUnit,
					},
					headerGeneralOptions = {
						name = L["General"],
						type = "header",
						order = 2,
					},
					height = {
						name = L["Height"],
						desc = L["Set the height of the frame."],
						type = "range",
						order = 2.1,
						min = 10,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					width = {
						name = L["Width"],
						desc = L["Set the width of the frame."],
						type = "range",
						order = 2.2,
						min = 20,
						max = 600,
						step = 1,
						width = "full",
						disabled = Lockdown,
					},
					scale = {
						name = L["Scale"],
						desc = L["Set the scale of the frame."],
						type = "range",
						order = 2.3,
						min = 0.5,
						max = 3,
						step = 0.01,
						isPercent = true,
						width = "double",
						disabled = Lockdown,
					},
					offset = {
						name = L["Offset"],
						desc = L["Set the space between units."],
						type = "range",
						order = 2.4,
						min = 0,
						max = 200,
						step = 1,
						disabled = Lockdown,
						set = function(info, value) set(info,value) LunaUF.Units:ReloadHeader("mainassisttargettarget") end,
					},
					anchorTo = {
						name = L["Anchor To"],
						desc = L["Anchor to another frame."],
						type = "select",
						order = 2.5,
						values = getAnchors,
						set = SetAnchorTo,
						disabled = Lockdown,
					},
					x = {
						name = L["X Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.6,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassisttargettarget"].x) end,
						set = function(info, value) LunaUF.db.profile.units["mainassisttargettarget"].x = tonumber(value) LunaUF.Units:ReloadHeader("mainassisttargettarget") end,
						disabled = Lockdown,
					},
					y = {
						name = L["Y Position"],
						desc = L["Set the position of the frame."],
						type = "input",
						order = 2.7,
						validate = nbrValidate,
						get = function() return tostring(LunaUF.db.profile.units["mainassisttargettarget"].y) end,
						set = function(info, value) LunaUF.db.profile.units["mainassisttargettarget"].y = tonumber(value) LunaUF.Units:ReloadHeader("mainassisttargettarget") end,
						disabled = Lockdown,
					},
					attribPoint = {
						name = L["Growth direction"],
						desc = L["The direction in which new frames are added."],
						type = "select",
						order = 2.8,
						values = {["RIGHT"] = L["Left"],["LEFT"] = L["Right"],["BOTTOM"] = L["Up"],["TOP"] = L["Down"]},
						set = setGrowthDir,
						disabled = Lockdown,
					},
					sortMethod = {
						name = L["Sort by"],
						desc = L["Sort by name or index"],
						type = "select",
						order = 2.9,
						values = {["INDEX"] = L["Index"],["NAME"] = L["Name"]},
						set = setSortMethod,
						disabled = Lockdown,
					},
					sortOrder = {
						name = L["Sort order"],
						desc = L["Sort ascending or descending"],
						type = "select",
						order = 2.91,
						values = {["ASC"] = L["Ascending"],["DESC"] = L["Descending"]},
						set = setSortOrder,
						disabled = Lockdown,
					},
				},
			},
			hidden = {
				name = L["Hide Blizzard"],
				type = "group",
				order = 18,
				get = function(info) return LunaUF.db.profile.hidden[info[#info]] end,
				set = function(info, value) LunaUF.db.profile.hidden[info[#info]] = value LunaUF:HideBlizzardFrames() end,
				args = {
					help = {
						order = 1,
						type = "group",
						name = L["Hint"],
						inline = true,
						args = {
							description = {
								type = "description",
								name = L["You will need to do a /console reloadui before a hidden frame becomes visible again."],
								width = "full",
							},
						},
					},
					player = {
						name = L["player"],
						desc = string.format(L["Hides the default %s frame"], L["player"]),
						type = "toggle",
						order = 3,
					},
					pet = {
						name = L["pet"],
						desc = string.format(L["Hides the default %s frame"], L["pet"]),
						type = "toggle",
						order = 4,
					},
					cast = {
						name = L["Cast Bar"],
						desc = string.format(L["Hides the default %s frame"], L["Cast Bar"]),
						type = "toggle",
						order = 5,
					},
					buffs = {
						name = L["Buffs"],
						desc = string.format(L["Hides the default %s frame"], L["Buffs"]),
						type = "toggle",
						order = 6,
					},
					target = {
						name = L["target"],
						desc = string.format(L["Hides the default %s frame"], L["target"]),
						type = "toggle",
						order = 7,
					},
					party = {
						name = L["party"],
						desc = string.format(L["Hides the default %s frame"], L["party"]),
						type = "toggle",
						order = 8,
					},
					raid = {
						name = L["raid"],
						desc = string.format(L["Hides the default %s frame"], L["raid"]),
						type = "toggle",
						order = 9,
					},
				},
			},
			help = {
				name = L["Tag Help"],
				type = "group",
				order = 19,
				args = {
					help = {
						order = 1,
						type = "group",
						name = L["Tags - Help"],
						inline = true,
						args = {
							description = {
								type = "description",
								name = L["You can use tags to change the text information displayed on each frame. Just go to the tag section of the frame you want to change and put in some tags."],
								width = "full",
							},
						},
					},
					infoheader = {
						name = L["Info tags"],
						type = "header",
						order = 2,
					},
				},
			},
			autoprofiles = {
				name = L["Auto Profiles"],
				type = "group",
				order = 20,
				args = {
					help = {
						order = 1,
						type = "group",
						name = L["Auto Profiles - Help"],
						inline = true,
						args = {
							description = {
								type = "description",
								name = L["You can set up here which profiles should be automatically loaded on certain conditions."],
								width = "full",
							},
						},
					},
					switchtype = {
						name = L["Switch by"],
						desc = L["Type of event to switch to"],
						type = "select",
						order = 2,
						values = {["DISABLED"] = L["Disabled"], ["RESOLUTION"] = L["Screen Resolution"],["GROUP"] = L["Size of Group"]},
						get = function(info) return LunaUF.db.global.switchtype end,
						set = function(info, value) LunaUF.db.global.switchtype = value LunaUF:AutoswitchProfileSetup() end,
					},
					resolutionselect = {
						name = L["Screen Resolution"],
						desc = L["Resolution to assign a profile to"],
						type = "select",
						order = 3,
						hidden = function() return LunaUF.db.global.switchtype ~= "RESOLUTION" end,
						values = {GetScreenResolutions()},
						get = function(info) return resolutionselectvalue end,
						set = function(info, value) resolutionselectvalue = value end,
					},
					groupselect = {
						name = L["Size of Group"],
						desc = L["Size of group to assign a profile to"],
						type = "select",
						order = 4,
						hidden = function() return LunaUF.db.global.switchtype ~= "GROUP" end,
						values = {["RAID40"]=L["Raid40"],["RAID20"]=L["Raid20"],["RAID15"]=L["Raid15"],["RAID10"]=L["Raid10"],["RAID5"]=L["Raid5"],["PARTY"]=L["Party"],["SOLO"]=L["Solo"],},
						get = function(info) return groupselectvalue end,
						set = function(info, value) groupselectvalue = value end,
					},
					profileselect = {
						name = L["Profile"],
						desc = L["Name of the profile which to switch to"],
						type = "select",
						order = 5,
						values = function() LunaUF.db:GetProfiles(profiledb) profiledb["NIL"] = L["None"] return profiledb end,
						hidden = function() return LunaUF.db.global.switchtype == "DISABLED" end,
						get = function(info)
							LunaUF.db:GetProfiles(profiledb)
							profiledb["NIL"] = L["None"]
							if LunaUF.db.global.switchtype == "RESOLUTION" then
								local resolutions = {GetScreenResolutions()}
								for k,v in pairs(resolutions) do
									if k == resolutionselectvalue then
										for i,j in pairs(profiledb) do
											if LunaUF.db.global.resdb[v] == j then
												return i
											end
										end
									end
								end
								return "NIL"
							else
								for k,v in pairs(profiledb) do
									if v == LunaUF.db.global.grpdb[groupselectvalue] then
										return k
									end
								end
								return "NIL"
							end
						end,
						set = function(info, value)
							LunaUF.db:GetProfiles(profiledb)
							profiledb["NIL"] = L["None"]
							if LunaUF.db.global.switchtype == "RESOLUTION" then
								local resolutions = {GetScreenResolutions()}
								for k,v in pairs(resolutions) do
									if k == resolutionselectvalue then
										LunaUF.db.global.resdb[v] = value ~= "NIL" and profiledb[value] or nil
										return
									end
								end
							else
								LunaUF.db.global.grpdb[groupselectvalue] = value ~= "NIL" and profiledb[value] or nil
							end
						end,
					},
				},
			},
		},
	}
	for mod, tbl in pairs(moduleOptions) do
		for _,unit in ipairs(LunaUF.unitList) do
			if not (moduleBlacklist[mod] and moduleBlacklist[mod][unit]) then
				aceoptions.args[unit].args[mod] = tbl
			end
		end
	end
	local i = 3
	for k in pairs(InfoTags) do
		aceoptions.args.help.args[k] = {
			order = i,
			type = "description",
			name = "["..k.."] = "..(L[k.."desc"] or L[k]),
			width = "full",
		}
		i = i + 1
	end
	aceoptions.args.help.args["healthnpowerheader"] = {
		order = i,
		type = "header",
		name = L["Health and power tags"],
	}
	i = i + 1
	for k in pairs(HealthnPowerTags) do
		aceoptions.args.help.args[k] = {
			order = i,
			type = "description",
			name = "["..k.."] = "..L[k],
			width = "full",
		}
		i = i + 1
	end
	aceoptions.args.help.args["colorheader"] = {
		order = i,
		type = "header",
		name = L["Color tags"],
	}
	i = i + 1
	for k in pairs(ColorTags) do
		aceoptions.args.help.args[k] = {
			order = i,
			type = "description",
			name = "["..k.."] = "..L[k],
			width = "full",
		}
		i = i + 1
	end
	AceConfigRegistry:RegisterOptionsTable(Addon, aceoptions, true)
	aceoptions.args.profile = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)


	AceConfigDialog:AddToBlizOptions(Addon, nil, nil, "general")
	AceConfigDialog:AddToBlizOptions(Addon, L["Colors"], Addon, "colors")
	for _,unit in ipairs(LunaUF.unitList) do
		AceConfigDialog:AddToBlizOptions(Addon, L[unit], Addon, unit)
	end
	AceConfigDialog:AddToBlizOptions(Addon, L["Hide Blizzard"], Addon, "hidden")
	AceConfigDialog:AddToBlizOptions(Addon, L["Tag Help"], Addon, "help")
	AceConfigDialog:AddToBlizOptions(Addon, L["Auto Profiles"], Addon, "autoprofiles")
	AceConfigDialog:AddToBlizOptions(Addon, L["Profiles"], Addon, "profile")

	AceConfigDialog:SetDefaultSize(Addon, 895, 570)
end